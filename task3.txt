1. Причины выбора именно этого пакета composer для парсинга excel
1.1. Достаточно известный автор
1.2. Популярный пакет
1.3. Поддерживается
1.4. Использует генераторы, поэтому можно использовать для парсинга файлов большого объема
1.5. Нет сложного функционала, который нам не нужен. Поэтому пакет легкий и простой в использовании

2. Чем вы руководствовались, когда определяли правила валидации excel-файла
В основном примером файла и здравым смыслом. id - натуральное число, name - как видно из примера, это два слова (имя, фамилия) на латинице, разделенные пробелом, date - дата в формате d.m.Y

3. Как вы анализировали производительность вашего решения?
Сделал команду для генерации тестовых файлов импорта persons-import-file:generate. Проверил на файлах в 6млн строк, импорт завершается за 70 секунд, что, на мой взгляд, нормальная скорость.

4. Будет ли ваше решение стабильно при увеличении количества строк в файле в 100 раз?
Будет, проверено. За счет асинхронного импорта, обработка и запись всех данных из файла происходит в фоне. Кроме того, используемая библиотека не читает весь файл целиком, а только построчно, что позволяет ей нормально работать независимо от размера файла. Думаю, можно говорить, что импорт будет стабильным при увеличении файла и в 1000 раз. Слабым местом тут является загрузка через браузер. Точно придется реализовать загрузку по частям.

5. Что можно было бы улучшить в вашей реализации?
5.1. Реализовать валидацию имен колонок в файле импорта
5.2. Реализовать загрузку файлов по частям
5.3. Реализовать уведомление пользователя об окончании импорта и/или gui для мониторинга всех импортов
5.4. Поставить обработку импорта либо по планировщику, либо через очередь.
5.5. Помимо загрузки по частям, возможно, стоит и обрабатывать файл по частям. Тут можно реализовать многопоточность. Один поток обрабатывает одну часть, второй вторую и т.д.
